
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__org_zedroot_douane_h__ADAPTOR_MARSHAL_H
#define __dbusxx__org_zedroot_douane_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace zedroot {

class Douane_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Douane_adaptor()
    : ::DBus::InterfaceAdaptor("org.zedroot.Douane")
    {
        bind_property(DaemonVersion, "s", true, false);
        register_method(Douane_adaptor, GetRules, _GetRules_stub);
        register_method(Douane_adaptor, DeleteRule, _DeleteRule_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const
    {
        static ::DBus::IntrospectedArgument GetRules_args[] =
        {
            { "rules", "a(ssb)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument DeleteRule_args[] =
        {
            { "rule_id", "s", true },
            { "result", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Douane_adaptor_methods[] =
        {
            { "GetRules", GetRules_args },
            { "DeleteRule", DeleteRule_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Douane_adaptor_signals[] =
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Douane_adaptor_properties[] =
        {
            { "DaemonVersion", "s", true, false },
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Douane_adaptor_interface =
        {
            "org.zedroot.Douane",
            Douane_adaptor_methods,
            Douane_adaptor_signals,
            Douane_adaptor_properties
        };
        return &Douane_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */
    ::DBus::PropertyAdaptor< std::string > DaemonVersion;

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< ::DBus::Struct< std::string, std::string, bool > > GetRules() = 0;
    virtual bool DeleteRule(const std::string& rule_id) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _GetRules_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::Struct< std::string, std::string, bool > > argout1 = GetRules();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _DeleteRule_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argout1 = DeleteRule(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} }
#endif //__dbusxx__org_zedroot_douane_h__ADAPTOR_MARSHAL_H
